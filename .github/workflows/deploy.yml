name: 🚀 Deploy Spinza.io Smart Contract

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'devnet'
        type: choice
        options:
        - devnet
        - mainnet-beta

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🧹 NUCLEAR CLEAN
      run: |
        echo "🧹 NUCLEAR CLEAN - Removing EVERYTHING..."
        sudo apt-get remove -y rustc cargo || true
        sudo apt-get autoremove -y || true
        rustup self uninstall -y || true
        rm -rf ~/.rustup ~/.cargo /usr/local/cargo /usr/local/rustup || true
        sudo rm -rf /usr/bin/rustc /usr/bin/cargo || true
        
    - name: 🦀 NUCLEAR RUST INSTALL
      run: |
        echo "📦 NUCLEAR Rust installation..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.77.0 --profile minimal
        source ~/.cargo/env
        
        # FORCE update PATH globally
        echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
        echo 'export RUSTUP_HOME="$HOME/.rustup"' >> ~/.bashrc
        echo 'export CARGO_HOME="$HOME/.cargo"' >> ~/.bashrc
        source ~/.bashrc
        
        # Verify NUCLEAR installation
        ~/.cargo/bin/rustc --version
        ~/.cargo/bin/cargo --version
        
    - name: ⚡ Install Solana CLI
      run: |
        source ~/.cargo/env
        echo "Installing Solana CLI..."
        cd /tmp
        wget https://github.com/solana-labs/solana/releases/download/v1.18.0/solana-release-x86_64-unknown-linux-gnu.tar.bz2
        tar -xjf solana-release-x86_64-unknown-linux-gnu.tar.bz2
        mkdir -p ~/.local/share/solana/install/active_release
        cp -r solana-release/* ~/.local/share/solana/install/active_release/
        chmod +x ~/.local/share/solana/install/active_release/bin/*
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        ~/.local/share/solana/install/active_release/bin/solana --version
        
    - name: ⚓ Install Anchor CLI
      run: |
        source ~/.cargo/env
        export PATH="$HOME/.cargo/bin:$PATH"
        npm install -g @coral-xyz/anchor-cli@0.30.0
        anchor --version
        
    - name: 🔑 Setup Solana Keypair
      run: |
        source ~/.cargo/env
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        mkdir -p ~/.config/solana
        echo '${{ secrets.SOLANA_PRIVATE_KEY }}' > ~/.config/solana/id.json
        chmod 600 ~/.config/solana/id.json
        ~/.local/share/solana/install/active_release/bin/solana config set --url ${{ github.event.inputs.environment || 'devnet' }}
        
    - name: 💰 Fund Wallet
      run: |
        source ~/.cargo/env
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        echo "Wallet: $(~/.local/share/solana/install/active_release/bin/solana address)"
        if [ "${{ github.event.inputs.environment || 'devnet' }}" = "devnet" ]; then
          ~/.local/share/solana/install/active_release/bin/solana airdrop 2 || echo "Airdrop failed"
          sleep 5
        fi
        
    - name: 🔨 NUCLEAR BUILD
      run: |
        source ~/.cargo/env
        export PATH="$HOME/.cargo/bin:$PATH"
        export RUSTUP_HOME="$HOME/.rustup"
        export CARGO_HOME="$HOME/.cargo"
        
        echo "🔍 FINAL VERIFICATION:"
        echo "rustc: $(which rustc) -> $(rustc --version)"
        echo "cargo: $(which cargo) -> $(cargo --version)"
        
        # NUCLEAR BUILD with explicit paths - BACK TO WORKING VERSION
        ~/.cargo/bin/cargo --version
        CARGO_NET_GIT_FETCH_WITH_CLI=true ~/.cargo/bin/cargo build --release --manifest-path programs/spinza/Cargo.toml
        
    - name: 🚀 Deploy Smart Contract (RENAME ALL LONG SECTIONS)
      run: |
        echo "Deploying with ALL long sections renamed..."
        
        # Find and copy libspinza.so
        LIBSPINZA_SO=$(find . -name "libspinza.so" -type f | grep -v deps | head -1)
        if [ -z "$LIBSPINZA_SO" ]; then
          LIBSPINZA_SO=$(find . -name "libspinza.so" -type f | head -1)
        fi
        
        mkdir -p target/deploy
        cp "$LIBSPINZA_SO" target/deploy/spinza.so
        
        # NUCLEAR RENAME: Rename ALL problematic sections
        echo "🏷️ Renaming ALL long ELF sections..."
        
        # .note.gnu.build-id (18 chars) -> .note.build (11 chars)
        objcopy --rename-section=.note.gnu.build-id=.note.build target/deploy/spinza.so || echo "build-id rename failed"
        
        # .gcc_except_table (17 chars) -> .gcc_except (11 chars)  
        objcopy --rename-section=.gcc_except_table=.gcc_except target/deploy/spinza.so || echo "gcc_except rename failed"
        
        # .eh_frame_hdr (13 chars - OK but let's shorten just in case)
        objcopy --rename-section=.eh_frame_hdr=.eh_frame target/deploy/spinza.so || echo "eh_frame rename failed"
        
        # Check for any other long sections and rename them
        echo "🔍 Looking for other long sections..."
        LONG_SECTIONS=$(readelf -S target/deploy/spinza.so | awk '{print $2}' | grep -E '^\..*' | awk 'length($0) > 16')
        
        for section in $LONG_SECTIONS; do
          if [ ${#section} -gt 16 ]; then
            short_name=$(echo "$section" | cut -c1-15)
            echo "Renaming $section -> $short_name"
            objcopy --rename-section="$section=$short_name" target/deploy/spinza.so || echo "Failed to rename $section"
          fi
        done
        
        echo "✅ All long sections renamed"
        
        # Verify the fix
        echo "🔍 Final section check:"
        readelf -S target/deploy/spinza.so | awk '{print $2}' | grep -E '^\..*' | while read section; do
          echo "Section: $section (${#section} chars)"
        done
        
        # Deploy with Solana CLI
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        PROGRAM_ID=$(anchor keys list | grep spinza | awk '{print $2}')
        
        ~/.local/share/solana/install/active_release/bin/solana program deploy target/deploy/spinza.so --program-id $PROGRAM_ID
        
        echo "Deployment completed!"
        
    - name: 📊 Get Program ID
      run: |
        source ~/.cargo/env
        PROGRAM_ID=$(anchor keys list | grep spinza | awk '{print $2}')
        echo "🎉 SUCCESS! Program ID: $PROGRAM_ID"
        echo "PROGRAM_ID=$PROGRAM_ID" > deployment_info.txt
        
    - name: 🎯 Initialize Game
      run: |
        cd scripts
        npm install
        node initialize.js
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: deployment_info.txt
