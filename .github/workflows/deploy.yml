name: 🚀 Deploy Spinza.io Smart Contract

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'devnet'
        type: choice
        options:
        - devnet
        - mainnet-beta

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust (Complete Fix)
      run: |
        echo "🧹 Completely removing any existing Rust..."
        rustup self uninstall -y || true
        rm -rf ~/.rustup ~/.cargo || true
        
        echo "📦 Installing fresh Rust 1.77.0..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.77.0
        source ~/.cargo/env
        
        echo "🔧 Configuring Rust..."
        rustup default 1.77.0
        rustup component add rustfmt
        
        echo "✅ Verifying installation..."
        rustc --version
        cargo --version
        
        # Add to PATH for subsequent steps
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: 🧹 Clean Cargo State
      run: |
        echo "Cleaning any problematic Cargo files..."
        rm -f Cargo.lock
        rm -f programs/spinza/Cargo.lock
        rm -rf target/
        echo "✅ Cleaned successfully!"
        
    - name: ⚡ Install Solana CLI
      run: |
        echo "Installing Solana CLI..."
        cd /tmp
        wget https://github.com/solana-labs/solana/releases/download/v1.18.0/solana-release-x86_64-unknown-linux-gnu.tar.bz2
        tar -xjf solana-release-x86_64-unknown-linux-gnu.tar.bz2
        mkdir -p ~/.local/share/solana/install/active_release
        cp -r solana-release/* ~/.local/share/solana/install/active_release/
        chmod +x ~/.local/share/solana/install/active_release/bin/*
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        ~/.local/share/solana/install/active_release/bin/solana --version
        
    - name: ⚓ Install Anchor CLI
      run: |
        source ~/.cargo/env
        npm install -g @coral-xyz/anchor-cli@0.30.0
        anchor --version
        
    - name: 🔑 Setup Solana Keypair
      run: |
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        mkdir -p ~/.config/solana
        echo '${{ secrets.SOLANA_PRIVATE_KEY }}' > ~/.config/solana/id.json
        chmod 600 ~/.config/solana/id.json
        ~/.local/share/solana/install/active_release/bin/solana config set --url ${{ github.event.inputs.environment || 'devnet' }}
        
    - name: 💰 Fund Wallet
      run: |
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        echo "Wallet: $(~/.local/share/solana/install/active_release/bin/solana address)"
        echo "Balance: $(~/.local/share/solana/install/active_release/bin/solana balance)"
        if [ "${{ github.event.inputs.environment || 'devnet' }}" = "devnet" ]; then
          ~/.local/share/solana/install/active_release/bin/solana airdrop 2 || echo "Airdrop failed"
          sleep 5
        fi
        
    - name: 🔨 Build Smart Contract
      run: |
        echo "Building contract..."
        
        # Force use correct Rust version
        source ~/.cargo/env
        export PATH="$HOME/.cargo/bin:$PATH"
        
        # Verify versions before building
        echo "Rust version: $(rustc --version)"
        echo "Cargo version: $(cargo --version)"
        
        # Fail if wrong version
        RUST_VERSION=$(rustc --version | grep -o "1\.[0-9][0-9]\.[0-9]")
        if [[ "$RUST_VERSION" < "1.75.0" ]]; then
          echo "❌ ERROR: Rust version $RUST_VERSION is too old!"
          exit 1
        fi
        
        echo "✅ Rust version $RUST_VERSION is compatible"
        
        # Build with proper environment
        CARGO_NET_GIT_FETCH_WITH_CLI=true anchor build
        
    - name: 🚀 Deploy Smart Contract
      run: |
        source ~/.cargo/env
        echo "Deploying..."
        anchor deploy --provider.cluster ${{ github.event.inputs.environment || 'devnet' }}
        
    - name: 📊 Get Program ID
      run: |
        source ~/.cargo/env
        PROGRAM_ID=$(anchor keys list | grep spinza | awk '{print $2}')
        echo "🎉 SUCCESS! Program ID: $PROGRAM_ID"
        echo "PROGRAM_ID=$PROGRAM_ID" > deployment_info.txt
        
    - name: 🎯 Initialize Game
      run: |
        cd scripts
        npm install
        node initialize.js
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: deployment_info.txt
