name: 🚀 Deploy Spinza.io Smart Contract

on:
  workflow_dispatch:  # Manual trigger
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'devnet'
        type: choice
        options:
        - devnet
        - mainnet-beta

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'devnet' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🦀 Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: 📦 Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: ⚡ Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v1.18.0/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        
    - name: ⚓ Install Anchor CLI
      run: |
        npm install -g @coral-xyz/anchor-cli@0.30.0
        
    - name: 🔑 Setup Solana Keypair
      run: |
        mkdir -p ~/.config/solana
        echo '${{ secrets.SOLANA_PRIVATE_KEY }}' > ~/.config/solana/id.json
        chmod 600 ~/.config/solana/id.json
        solana config set --url ${{ github.event.inputs.environment || 'devnet' }}
        echo "Using cluster: $(solana config get | grep 'RPC URL')"
        
    - name: 💰 Check and Fund Wallet
      run: |
        echo "Wallet address: $(solana address)"
        echo "Current balance: $(solana balance)"
        
        if [ "${{ github.event.inputs.environment || 'devnet' }}" = "devnet" ]; then
          echo "Requesting airdrop for devnet..."
          solana airdrop 2 || echo "Airdrop failed, continuing with existing balance"
          sleep 5
          echo "Balance after airdrop: $(solana balance)"
        else
          echo "Mainnet deployment - ensure wallet has sufficient SOL"
        fi
        
    - name: 🔨 Build Smart Contract
      run: |
        echo "Building Spinza smart contract..."
        anchor build
        echo "Build completed successfully!"
        
    - name: 📋 Show Program Info
      run: |
        echo "Program binary size: $(ls -lh target/deploy/spinza.so)"
        echo "Program ID will be: $(anchor keys list)"
        
    - name: 🚀 Deploy Smart Contract
      run: |
        echo "Deploying to ${{ github.event.inputs.environment || 'devnet' }}..."
        anchor deploy --provider.cluster ${{ github.event.inputs.environment || 'devnet' }}
        echo "Deployment completed!"
        
    - name: 📊 Verify Deployment
      run: |
        PROGRAM_ID=$(anchor keys list | grep spinza | awk '{print $2}')
        echo "✅ Smart Contract Deployed Successfully!"
        echo "📍 Program ID: $PROGRAM_ID"
        echo "🌐 Network: ${{ github.event.inputs.environment || 'devnet' }}"
        echo "💰 Remaining balance: $(solana balance)"
        
        # Verify program exists on-chain
        solana program show $PROGRAM_ID
        
    - name: 🎯 Initialize Game State
      run: |
        echo "Initializing game state..."
        cd scripts
        npm install
        node initialize.js
        echo "Game state initialized successfully!"
        
    - name: 📋 Deployment Summary
      run: |
        PROGRAM_ID=$(anchor keys list | grep spinza | awk '{print $2}')
        echo "🎉 DEPLOYMENT COMPLETE!"
        echo "=================================="
        echo "📍 Program ID: $PROGRAM_ID"
        echo "🌐 Network: ${{ github.event.inputs.environment || 'devnet' }}"
        echo "👑 Operator Wallet: E7Y3q3gNA8DKGrXydpCnv4cTQnbkzM1wx3maHqJDv7n6"
        echo "💰 Min Bet: 0.1 SOL"
        echo "💰 Max Bet: 100 SOL"
        echo "👥 Max Players: 50"
        echo "💼 Commission: 10%"
        echo "=================================="
        echo ""
        echo "🔧 Next Steps:"
        echo "1. Update your frontend PROGRAM_ID to: $PROGRAM_ID"
        echo "2. Test wallet connection and betting"
        echo "3. Enjoy your deployed game! 🎮"
        
        # Save deployment info to file
        cat > deployment_info.txt << EOF
SPINZA.IO DEPLOYMENT INFO
========================
Program ID: $PROGRAM_ID
Network: ${{ github.event.inputs.environment || 'devnet' }}
Deployed At: $(date)
Operator Wallet: E7Y3q3gNA8DKGrXydpCnv4cTQnbkzM1wx3maHqJDv7n6
Min Bet: 0.1 SOL
Max Bet: 100 SOL
Max Players: 50
Commission Rate: 10%

Explorer Link: https://explorer.solana.com/address/$PROGRAM_ID?cluster=${{ github.event.inputs.environment || 'devnet' }}
EOF
        
    - name: 📤 Upload Deployment Info
      uses: actions/upload-artifact@v3
      with:
        name: deployment-info
        path: |
          deployment_info.txt
          target/idl/spinza.json
          target/deploy/spinza.so
