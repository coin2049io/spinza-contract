name: 🚀 Deploy Spinza.io Smart Contract

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'devnet'
        type: choice
        options:
        - devnet
        - mainnet-beta

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🧹 NUCLEAR CLEAN
      run: |
        echo "🧹 NUCLEAR CLEAN - Removing EVERYTHING..."
        sudo apt-get remove -y rustc cargo || true
        sudo apt-get autoremove -y || true
        rustup self uninstall -y || true
        rm -rf ~/.rustup ~/.cargo /usr/local/cargo /usr/local/rustup || true
        sudo rm -rf /usr/bin/rustc /usr/bin/cargo || true
        
    - name: 🦀 NUCLEAR RUST INSTALL
      run: |
        echo "📦 NUCLEAR Rust installation..."
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.77.0 --profile minimal
        source ~/.cargo/env
        
        # FORCE update PATH globally
        echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
        echo 'export RUSTUP_HOME="$HOME/.rustup"' >> ~/.bashrc
        echo 'export CARGO_HOME="$HOME/.cargo"' >> ~/.bashrc
        source ~/.bashrc
        
        # Verify NUCLEAR installation
        ~/.cargo/bin/rustc --version
        ~/.cargo/bin/cargo --version
        
    - name: ⚡ Install Solana CLI
      run: |
        source ~/.cargo/env
        echo "Installing Solana CLI..."
        cd /tmp
        wget https://github.com/solana-labs/solana/releases/download/v1.18.0/solana-release-x86_64-unknown-linux-gnu.tar.bz2
        tar -xjf solana-release-x86_64-unknown-linux-gnu.tar.bz2
        mkdir -p ~/.local/share/solana/install/active_release
        cp -r solana-release/* ~/.local/share/solana/install/active_release/
        chmod +x ~/.local/share/solana/install/active_release/bin/*
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        ~/.local/share/solana/install/active_release/bin/solana --version
        
    - name: ⚓ Install Anchor CLI
      run: |
        source ~/.cargo/env
        export PATH="$HOME/.cargo/bin:$PATH"
        npm install -g @coral-xyz/anchor-cli@0.30.0
        anchor --version
        
    - name: 🔑 Setup Solana Keypair
      run: |
        source ~/.cargo/env
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        mkdir -p ~/.config/solana
        echo '${{ secrets.SOLANA_PRIVATE_KEY }}' > ~/.config/solana/id.json
        chmod 600 ~/.config/solana/id.json
        ~/.local/share/solana/install/active_release/bin/solana config set --url ${{ github.event.inputs.environment || 'devnet' }}
        
    - name: 💰 Fund Wallet
      run: |
        source ~/.cargo/env
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        echo "Wallet: $(~/.local/share/solana/install/active_release/bin/solana address)"
        if [ "${{ github.event.inputs.environment || 'devnet' }}" = "devnet" ]; then
          ~/.local/share/solana/install/active_release/bin/solana airdrop 2 || echo "Airdrop failed"
          sleep 5
        fi
        
    - name: 🔨 NUCLEAR BUILD (BACK TO WORKING)
      run: |
        source ~/.cargo/env
        export PATH="$HOME/.cargo/bin:$PATH"
        export RUSTUP_HOME="$HOME/.rustup"
        export CARGO_HOME="$HOME/.cargo"
        
        echo "🔍 FINAL VERIFICATION:"
        echo "rustc: $(which rustc) -> $(rustc --version)"
        echo "cargo: $(which cargo) -> $(cargo --version)"
        
        # BACK TO WORKING BUILD - let Anchor handle the target
        ~/.cargo/bin/cargo --version
        CARGO_NET_GIT_FETCH_WITH_CLI=true ~/.cargo/bin/cargo build --release --manifest-path programs/spinza/Cargo.toml
        
    - name: 🚀 Deploy Smart Contract (NUCLEAR BPF + FILE HANDLING)
      run: |
        echo "Building and deploying with Solana BPF tools + file handling..."
        
        # NUCLEAR: Disable Solana CLI temporarily during build
        mv ~/.local/share/solana ~/.local/share/solana_backup
        
        # Use our working Rust
        source ~/.cargo/env
        export PATH="$HOME/.cargo/bin:$PATH"
        export RUSTC="$HOME/.cargo/bin/rustc"
        export CARGO="$HOME/.cargo/bin/cargo"
        
        echo "🔍 VERIFICATION:"
        rustc --version
        
        # Install Solana BPF target for our Rust
        echo "🎯 Installing Solana BPF target..."
        ~/.cargo/bin/rustup target add bpfel-unknown-unknown || echo "Target add failed"
        ~/.cargo/bin/rustup target list --installed | grep bpfel || echo "BPF target not installed"
        
        # ENSURE target/deploy directory exists
        mkdir -p target/deploy
        
        # Try building with BPF target using our Rust
        echo "🔨 Building for BPF with our Rust..."
        if CARGO_NET_GIT_FETCH_WITH_CLI=true ~/.cargo/bin/cargo build --release --target bpfel-unknown-unknown --manifest-path programs/spinza/Cargo.toml; then
          echo "✅ BPF build successful!"
          
          # ROBUST FILE FINDING: Look in BPF target directory
          echo "🔍 Looking for BPF binary..."
          find target/bpfel-unknown-unknown -name "*.so" -type f | head -10
          
          BPF_SO=$(find target/bpfel-unknown-unknown -name "libspinza.so" -type f | head -1)
          
          if [ -n "$BPF_SO" ]; then
            echo "✅ Found BPF binary: $BPF_SO"
            cp "$BPF_SO" target/deploy/spinza.so
            echo "✅ Copied BPF binary to target/deploy/spinza.so"
            
            # VERIFY the file exists and is correct architecture
            ls -la target/deploy/spinza.so
            file target/deploy/spinza.so
            
          else
            echo "❌ BPF binary not found! Looking for alternatives..."
            # FALLBACK: Look for any .so in BPF directory
            ALT_SO=$(find target/bpfel-unknown-unknown -name "*.so" -type f | head -1)
            if [ -n "$ALT_SO" ]; then
              echo "🔄 Using alternative .so file: $ALT_SO"
              cp "$ALT_SO" target/deploy/spinza.so
            else
              echo "💀 No .so files found in BPF target!"
              exit 1
            fi
          fi
          
        else
          echo "❌ BPF build failed! Checking what we have..."
          find target -name "*.so" -type f | head -10
          exit 1
        fi
        
        # FINAL VERIFICATION before deployment
        if [ ! -f "target/deploy/spinza.so" ]; then
          echo "💀 FATAL: target/deploy/spinza.so still doesn't exist!"
          ls -la target/deploy/ || echo "target/deploy directory doesn't exist"
          exit 1
        fi
        
        echo "✅ target/deploy/spinza.so ready for deployment"
        
        # Restore Solana CLI for deployment
        mv ~/.local/share/solana_backup ~/.local/share/solana
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        
        # Deploy the BPF binary
        echo "🚀 Deploying BPF binary to devnet..."
        PROGRAM_ID=$(anchor keys list | grep spinza | awk '{print $2}')
        echo "📍 Program ID: $PROGRAM_ID"
        
        ~/.local/share/solana/install/active_release/bin/solana program deploy target/deploy/spinza.so --program-id $PROGRAM_ID --url devnet
        
        echo "✅ BPF Deployment completed!"
        
    - name: 📊 Get Program ID
      run: |
        source ~/.cargo/env
        PROGRAM_ID=$(anchor keys list | grep spinza | awk '{print $2}')
        echo "🎉 SUCCESS! Program ID: $PROGRAM_ID"
        echo "PROGRAM_ID=$PROGRAM_ID" > deployment_info.txt

    - name: 🔍 Verify Program Actually Exists
      run: |
        echo "Verifying if program actually exists on devnet..."
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        
        # Get the program ID from anchor
        DEPLOYED_ID=$(anchor keys list | grep spinza | awk '{print $2}')
        echo "📍 Deployed Program ID: $DEPLOYED_ID"
        
        # Check if program exists on devnet
        echo "🔍 Checking program on devnet..."
        if ~/.local/share/solana/install/active_release/bin/solana program show $DEPLOYED_ID --url devnet; then
          echo "✅ Program EXISTS on devnet!"
        else
          echo "❌ Program NOT FOUND on devnet!"
          echo "🔍 Let's check what went wrong..."
          
          # Check our wallet balance
          echo "💰 Wallet balance:"
          ~/.local/share/solana/install/active_release/bin/solana balance --url devnet
          
          # List recent transactions
          echo "📋 Recent transactions:"
          ~/.local/share/solana/install/active_release/bin/solana transaction-history --url devnet | head -5
          
          # Try to redeploy
          echo "🔄 Attempting to redeploy..."
          anchor deploy --provider.cluster devnet
        fi
        
    - name: 🎯 Initialize Game State
      run: |
        echo "Initializing game state..."
        
        # Set required environment variables
        export ANCHOR_PROVIDER_URL="${{ github.event.inputs.environment == 'mainnet-beta' && 'https://api.mainnet-beta.solana.com' || 'https://api.devnet.solana.com' }}"
        export ANCHOR_WALLET="$HOME/.config/solana/id.json"
        
        echo "Using provider URL: $ANCHOR_PROVIDER_URL"
        echo "Using wallet: $ANCHOR_WALLET"
        
        # Check if IDL file exists, create if missing
        mkdir -p target/idl
        
        if [ ! -f "target/idl/spinza.json" ]; then
          echo "🔨 Creating minimal IDL..."
          
          # Get the program ID from the successful deployment
          PROGRAM_ID=$(anchor keys list | grep spinza | awk '{print $2}')
          echo "🔍 Using dynamic Program ID: $PROGRAM_ID"
          
          # Create minimal IDL
          echo '{' > target/idl/spinza.json
          echo '  "version": "0.1.0",' >> target/idl/spinza.json
          echo '  "name": "spinza",' >> target/idl/spinza.json
          echo '  "programId": "'$PROGRAM_ID'",' >> target/idl/spinza.json
          echo '  "instructions": [' >> target/idl/spinza.json
          echo '    {' >> target/idl/spinza.json
          echo '      "name": "initialize",' >> target/idl/spinza.json
          echo '      "accounts": [' >> target/idl/spinza.json
          echo '        {"name": "gameState", "isMut": true, "isSigner": false},' >> target/idl/spinza.json
          echo '        {"name": "authority", "isMut": true, "isSigner": true},' >> target/idl/spinza.json
          echo '        {"name": "systemProgram", "isMut": false, "isSigner": false}' >> target/idl/spinza.json
          echo '      ],' >> target/idl/spinza.json
          echo '      "args": [' >> target/idl/spinza.json
          echo '        {"name": "operatorWallet", "type": "publicKey"},' >> target/idl/spinza.json
          echo '        {"name": "minBet", "type": "u64"},' >> target/idl/spinza.json
          echo '        {"name": "maxBet", "type": "u64"},' >> target/idl/spinza.json
          echo '        {"name": "maxPlayers", "type": "u8"},' >> target/idl/spinza.json
          echo '        {"name": "commissionRate", "type": "u16"}' >> target/idl/spinza.json
          echo '      ]' >> target/idl/spinza.json
          echo '    }' >> target/idl/spinza.json
          echo '  ],' >> target/idl/spinza.json
          echo '  "accounts": [],' >> target/idl/spinza.json
          echo '  "types": [],' >> target/idl/spinza.json
          echo '  "events": [],' >> target/idl/spinza.json
          echo '  "errors": []' >> target/idl/spinza.json
          echo '}' >> target/idl/spinza.json
          
          echo "✅ Minimal IDL created"
        else
          echo "✅ IDL file already exists"
        fi
        
        # Verify IDL exists
        ls -la target/idl/spinza.json
        
        # Install npm dependencies and run initialization
        cd scripts
        npm install
        cd ..

        echo "🔍 DEBUGGING IDL and Program loading..."
        
        # Debug the IDL file content
        echo "IDL file content:"
        cat target/idl/spinza.json
        
        # Test loading the IDL in Node.js
        cd scripts
        node -e "
        try {
          console.log('Testing IDL loading...');
          const idl = require('../target/idl/spinza.json');
          console.log('IDL loaded successfully');
          console.log('IDL programId:', idl.programId);
          console.log('IDL name:', idl.name);
          console.log('IDL version:', idl.version);
          
          const { PublicKey } = require('@solana/web3.js');
          console.log('Testing PublicKey creation...');
          const programId = new PublicKey('5gBR963NUrgHLLV6qL7RbMGdpZ4GcLXY3hvjyxrGthEY');
          console.log('Direct PublicKey created:', programId.toString());
          
          const programIdFromIDL = new PublicKey(idl.programId);
          console.log('PublicKey from IDL:', programIdFromIDL.toString());
          
        } catch (error) {
          console.error('DEBUG ERROR:', error.message);
          console.error('Stack:', error.stack);
        }
        "
        cd ..
        
        echo "🚀 Running initialization..."
        export NODE_PATH="./scripts/node_modules:$NODE_PATH"
        node scripts/initialize.js
        
        echo "Game state initialized successfully!"
        
    - name: 📤 Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: deployment-info
        path: deployment_info.txt
